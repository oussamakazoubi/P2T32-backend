generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SUPERVISOR
  SITE_REFERENT
  MAINTENANCE_AGENT
  CLIENT
}

model User {
  id               Int         @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String      @unique
  password         String
  role             UserRole
  createdAt        DateTime    @default(now())

  sitesSupervised  Site[]      @relation("SupervisorSites")
  sites            Site[]      @relation("ReferentSites")
  composts         Compost[]   @relation("ReferentComposts")
  assignedComposts Compost[]   @relation("UserComposts")

  messagesSent     Message[]   @relation("SentMessages")
  messagesReceived Message[]   @relation("ReceivedMessages")
  recordedData     CompostData[] @relation("AgentRecordedData")
  reports          Report[]    @relation("UserReports")

  notifications    Notification[]
}

model Site {
  id          Int      @id @default(autoincrement())
  name        String
  address     String?
  latitude    Float?
  longitude   Float?
  referents   User[]   @relation("ReferentSites")
  supervisor  User?    @relation("SupervisorSites", fields: [supervisorId], references: [id])
  supervisorId Int?
  composts    Compost[]
  events      Event[]
  createdAt   DateTime @default(now())
}

model Compost {
  id              Int         @id @default(autoincrement())
  site            Site        @relation(fields: [siteId], references: [id])
  siteId          Int
  name            String
  referent        User?       @relation("ReferentComposts", fields: [referentId], references: [id])
  referentId      Int?

  assignedUsers   User[]      @relation("UserComposts")

  dataRecords     CompostData[]

  norm            Norm?

  createdAt       DateTime    @default(now())
}

model Norm {
  id               Int      @id @default(autoincrement())
  compost          Compost  @relation(fields: [compostId], references: [id])
  compostId        Int      @unique

  temperatureMax   Float?   @default(70.0)
  humidityMax      Float?   @default(80.0)
  odorLevelMax     String?  @default("Moyen")
  compostMassMax   Float?   @default(1000.0)
  oxygenationMin   Float?   @default(10.0)
  woodChipsAddedMax Float?  @default(50.0)

  updatedAt        DateTime @updatedAt
}

model CompostData {
  id             Int       @id @default(autoincrement())
  compost        Compost   @relation(fields: [compostId], references: [id])
  compostId      Int
  recordedBy     User?     @relation("AgentRecordedData", fields: [recordedById], references: [id])
  recordedById   Int?
  recordedAt     DateTime  @default(now())
  temperature    Float?
  humidity       Float?
  oxygenation    Float?
  woodChipsAdded Float?
  compostMass    Float?
  odorLevel      String?
  turned         Boolean?
  redistributed  Boolean?
}

model Notification {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Event {
  id          Int      @id @default(autoincrement())
  site        Site     @relation(fields: [siteId], references: [id])
  siteId      Int
  title       String
  description String
  importance  Int
  startDate   DateTime
  endDate     DateTime?
  completed   Boolean  @default(false)
}

model Message {
  id          Int      @id @default(autoincrement())
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    Int
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId  Int
  content     String
  sentAt      DateTime @default(now())
  readAt      DateTime?
}

model Report {
  id                  Int      @id @default(autoincrement())
  user                User     @relation("UserReports", fields: [userId], references: [id])
  userId              Int
  siteId              Int
  generatedAt         DateTime @default(now())
  financialGraph      String
  compostEvolutionGraph String
  statsSummary        String
}
